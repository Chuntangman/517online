================================================================
                    地图集成功能测试指南
================================================================

## 功能架构说明

### 组件职责分工:

1. **Map.vue** (地图管理组件)
   - 负责地图实例的创建和管理
   - 提供 jumpToLocation(longitude, latitude) 方法
   - 提供 updateMarkers(filteredStations) 方法
   - 管理地图标记点的显示和更新

2. **RouteMain.vue** (主控制器)
   - 协调各子组件与地图的交互
   - 处理 station-selected 事件并调用地图跳转
   - 处理 filters-changed 事件并更新地图标记

3. **WaystationService.vue** (驿站服务组件)
   - 显示驿站列表和详情
   - 发射 station-selected 事件
   - 发射 filters-changed 事件

4. **useWaystation.js** (业务逻辑)
   - 管理驿站数据和筛选逻辑
   - 不直接操作地图，只管理数据状态

================================================================
                        测试步骤
================================================================

### 1. 启动项目
```bash
npm run dev
```

### 2. 导航到路线页面
访问: http://localhost:5174/route

### 3. 切换到驿站服务标签
点击顶部导航栏的"驿站服务"标签

### 4. 测试驿站列表显示
- ✅ 应该看到驿站列表（如果API连接失败，会显示模拟数据）
- ✅ 应该看到搜索框和服务类型筛选器

### 5. 测试地图跳转功能
- ✅ 点击任一驿站卡片
- ✅ 观察地图是否平滑移动到驿站位置
- ✅ 观察是否出现高亮的临时标记点（3秒后消失）
- ✅ 查看浏览器控制台的日志输出

### 6. 测试筛选功能
- ✅ 使用搜索框搜索驿站名称
- ✅ 点击服务类型筛选器（住宿、租车等）
- ✅ 观察地图标记点是否同步更新

### 7. 检查控制台日志
期望看到以下类型的日志：
```
正在获取驿站数据，API地址: http://localhost:3000/api/v1/waystations
驿站数据加载完成，共 X 个驿站
选择驿站: {station data}
正在跳转到驿站位置: 驿站名称 经度 纬度
Map.vue - jumpToLocation 被调用: {longitude: X, latitude: Y}
Map.vue - 地图跳转成功，目标位置: {longitude: X, latitude: Y}
地图跳转成功
```

================================================================
                      故障排除
================================================================

### 问题1: 驿站列表不显示
解决方案:
- 检查后端服务是否启动 (http://localhost:3000)
- 查看控制台是否有API错误
- 如果API失败，应该自动使用模拟数据

### 问题2: 点击驿站没有地图跳转
检查:
- 浏览器控制台是否有错误信息
- 确认mapRef是否正确传递给子组件
- 检查驿站数据是否包含有效的经纬度

### 问题3: 地图标记点不更新
检查:
- 筛选后的数据是否正确传递给地图组件
- Map.vue的updateMarkers方法是否被正确调用
- 控制台是否有相关错误日志

### 问题4: 地图实例未初始化
解决方案:
- 确保高德地图API正确加载
- 检查网络连接
- 查看浏览器控制台的地图加载日志

================================================================
                        预期行为
================================================================

### 成功的交互流程:

1. **用户点击驿站卡片**
   ↓
2. **WaystationService组件**
   - showStationDetails(station) 
   - emit('station-selected', station)
   ↓
3. **RouteMain组件**
   - handleStationSelected(station)
   - mapRef.value.jumpToLocation(longitude, latitude)
   ↓
4. **Map组件**
   - jumpToLocation方法执行
   - 地图平滑移动到目标位置
   - 显示高亮标记点
   - 3秒后移除临时标记

### 成功的筛选流程:

1. **用户使用搜索或筛选功能**
   ↓
2. **WaystationService组件**
   - filterWaystations()
   - emit('filters-changed', filteredData)
   ↓
3. **RouteMain组件**
   - handleFiltersChanged(filtered)
   - mapRef.value.updateMarkers(filtered)
   ↓
4. **Map组件**
   - updateMarkers方法执行
   - 清除旧标记点
   - 添加新的筛选后标记点

================================================================
                        模拟数据说明
================================================================

如果后端API不可用，系统会自动使用以下模拟数据:

1. **测试驿站1**
   - 位置: 海南岛 (110.1, 20.1)
   - 服务: 住宿✓、租车✓、维修✓

2. **测试驿站2**
   - 位置: 千岛湖 (119.1, 29.6)
   - 服务: 租车✓、还车✓

这些模拟数据确保即使在没有后端服务的情况下，
前端功能也能正常展示和测试。

================================================================
